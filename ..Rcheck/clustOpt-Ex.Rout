
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "clustOpt"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('clustOpt')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("adjusted_rand_index")
> ### * adjusted_rand_index
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: adjusted_rand_index
> ### Title: Calculate Adjusted Rand Index
> ### Aliases: adjusted_rand_index
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Compare two clustering results in a Seurat object
> ##D ari_score <- adjusted_rand_index(seurat_obj, "seurat_clusters", "leiden_clusters")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("clust_opt")
> ### * clust_opt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clust_opt
> ### Title: clust_opt
> ### Aliases: clust_opt
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Basic usage with scRNA-seq data
> ##D results <- clust_opt(seurat_obj, ndim = 50, subject_ids = "donor_id")
> ##D 
> ##D # CyTOF data analysis
> ##D cytof_results <- clust_opt(cytof_obj,
> ##D   ndim = 30, dtype = "CyTOF",
> ##D   subject_ids = "sample_id"
> ##D )
> ##D 
> ##D # Large dataset with custom sketch size
> ##D large_results <- clust_opt(large_obj,
> ##D   ndim = 50, sketch_size = 10000,
> ##D   subject_ids = "donor_id"
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("convert_seurat_to_bpcells")
> ### * convert_seurat_to_bpcells
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convert_seurat_to_bpcells
> ### Title: convert_seurat_to_bpcells
> ### Aliases: convert_seurat_to_bpcells
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Example usage
> ##D seurat_obj <- readRDS("/path/to/your/seurat_object.rds")
> ##D seurat_obj <- convert_seurat_to_bpcells(seurat_obj)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("get_valid_samples")
> ### * get_valid_samples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_valid_samples
> ### Title: get_valid_samples
> ### Aliases: get_valid_samples
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # `seurat_obj` is a Seurat object with a metadata column "sample_id":
> ##D get_valid_samples(seurat_obj, "sample_id", 50)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("leverage_sketch")
> ### * leverage_sketch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: leverage_sketch
> ### Title: leverage_sketch
> ### Aliases: leverage_sketch
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Basic sketching for scRNA-seq data (uses variable features)
> ##D sketched_obj <- leverage_sketch(seurat_obj,
> ##D   sketch_size = 5000,
> ##D   dtype = "scRNA"
> ##D )
> ##D 
> ##D # Sketching CyTOF data (uses ALL features from marker panel)
> ##D cytof_sketch <- leverage_sketch(cytof_obj,
> ##D   sketch_size = 2000,
> ##D   dtype = "CyTOF"
> ##D )
> ##D 
> ##D # Large dataset with on-disk matrices
> ##D large_sketch <- leverage_sketch(large_obj,
> ##D   sketch_size = 10000,
> ##D   on_disk = TRUE, verbose = TRUE
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.427 0.072 1.539 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
